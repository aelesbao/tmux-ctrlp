#!/usr/bin/env zsh

set -e -o extendedglob -x

if ! (( \
       (( ${+commands[eza]} )) \
    && (( ${+commands[fd]} )) \
    && (( ${+commands[fzf-tmux]} )) \
    && (( ${+commands[zoxide]} )) \
  )); then
  echo "Required dependencies not found. Please install eza, fd, fzf, and zoxide" >&2
  exit 1
fi

local script_dir=${~0:A:h}

source $script_dir/../lib/config.zsh

# Scans the workspaces for git repositories and
# cleans the trailing .git from the folder name.
function find-repos() {
  local -U repos=($(fd --max-depth $max_depth -H --no-ignore-vcs -g '.git' ${^workspaces}))
  echo ${repos%/\.git(/)#}
}

function search-paths() {
  local -U search_paths=()
  search_paths+=(${projects[@]})
  search_paths+=($(find-repos))
  echo ${search_paths[@]}
}

# Fuzzy find on all projects.
function fzf-projects {
  local -A scores=($(zoxide query -sl | awk -F' ' '{ print $2 " " $1 }'))
  local -a result=()

  # Construct the result array, associating zoxide's path score,
  # and replacing $HOME with ~
  for project in $(search-paths); do
    score=${scores[$project]:-'0.0'}
    result+=("$score:$project:${(D)project}")
  done

  # Sorts the result in numerical descending order
  result=(${(nO)result})

  preview_cmd='echo {2} | cut -d ":" -f1 | \
    eza -1h --color=always --icons=always --no-quotes \
    --group-directories-first --stdin'

  echo "${(F)result}" | fzf-tmux -p --ansi \
    --scheme=path \
    --tiebreak=index \
    --delimiter=: --with-nth=3 \
    --preview="$preview_cmd" \
    --preview-window='30%' \
    --border-label='Choose the project to open a tmux session'
}

function build-session-name {
  local target_dir="$1"

  if [[ -v session_names[$target_dir] ]]; then
    echo "$session_names[$target_dir]"
  else
    echo "${target_dir:t2}" | \
      tr . - | tr ' ' - | tr ':' - | tr '[:upper:]' '[:lower:]'
  fi
}

function main {
  load-config

  local target_dir="$1"

  if ! [[ -d "$target_dir" ]]; then
    local selected="$(fzf-projects)"
    target_dir=$(echo "$selected" | cut -d ':' -f2)
    [[ -d "$target_dir" ]] || return 0
  fi

  local session="$(build-session-name "$target_dir")"
  local window_name="${target_dir:t}"

  # Increment the directory's rank
  zoxide add "$target_dir"

  # Starts the tmux server if it's not running.
  if [[ -z "$TMUX" ]] && [[ -z "$(pgrep tmux)" ]]; then
    tmux start-server
  fi

  # If the session doesn't exist, create it at the target directory.
  if ! tmux has-session -t "$session" 2>/dev/null; then
    local cmd

    # Loads a smug project configuration file when the target directory has one.
    if [[ -f "$target_dir/.smug.yml" ]]; then
      cmd="smug start -f .smug.yml -i"
    fi

    tmux new-session -ds "$session" -c "$target_dir" -n "$window_name" $cmd
  fi

  # Find the window id for the target directory.
  # It gives preference to the window with the same name $window_name.
  local window_id="$(
    tmux list-windows -t "$session" -F '#{window_id}:#{window_name}:#{pane_current_path}' 2>/dev/null | \
      awk "{ print match(\$0, \"(:$window_name)?:$target_dir$\") \":\" \$1 }" | \
      sort -h -t ':' | \
      grep -v '0:' -m 1 | \
      cut -d ':' -f 2
  )"
  if [[ -z "$window_id" ]]; then
    # Open a new window on the target pane in the selected directory when it doesn't exists.
    window_id="$(tmux new-window -t "$session:" -c "$target_dir" -n "$window_name" -PF "#{window_id}")"

    # Parses a .tmux.conf file in the target directory if it exists.
    if [[ -f "$target_dir/.tmux.conf" ]]; then
      tmux source-file -t "$session:$window_id" "$target_dir/.tmux.conf"
    fi
  fi

  # Switch or attach to the session.
  if [[ -z "$TMUX" ]]; then
    tmux attach -t "$session"
  else
    tmux switch-client -t "$session"
  fi

  # Switch to the target window.
  tmux select-window -t "$session:$window_id"
}

main "$@"

# vim:ft=zsh
